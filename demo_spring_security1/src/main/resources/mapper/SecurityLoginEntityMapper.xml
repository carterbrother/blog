<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springbootpractice.demo.spring.security1.dao.mapper.SecurityLoginEntityMapper">
  <resultMap id="BaseResultMap" type="com.springbootpractice.demo.spring.security1.dao.entity.SecurityLoginEntity">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="CHAR" property="password" />
    <result column="password_expire_date" jdbcType="TIMESTAMP" property="passwordExpireDate" />
    <result column="lock_flag" jdbcType="INTEGER" property="lockFlag" />
    <result column="enable_flag" jdbcType="INTEGER" property="enableFlag" />
    <result column="created" jdbcType="TIMESTAMP" property="created" />
    <result column="updated" jdbcType="TIMESTAMP" property="updated" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, username, `password`, password_expire_date, lock_flag, enable_flag, created, 
    updated
  </sql>
  <select id="selectByExample" parameterType="com.springbootpractice.demo.spring.security1.dao.example.SecurityLoginEntityExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from security_login
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from security_login
    where id = #{id,jdbcType=BIGINT}
  </select>
  <insert id="insert" parameterType="com.springbootpractice.demo.spring.security1.dao.entity.SecurityLoginEntity">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into security_login (username, `password`, password_expire_date, 
      lock_flag, enable_flag, created, 
      updated)
    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=CHAR}, #{passwordExpireDate,jdbcType=TIMESTAMP}, 
      #{lockFlag,jdbcType=INTEGER}, #{enableFlag,jdbcType=INTEGER}, #{created,jdbcType=TIMESTAMP}, 
      #{updated,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.springbootpractice.demo.spring.security1.dao.entity.SecurityLoginEntity">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into security_login
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="passwordExpireDate != null">
        password_expire_date,
      </if>
      <if test="lockFlag != null">
        lock_flag,
      </if>
      <if test="enableFlag != null">
        enable_flag,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="updated != null">
        updated,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=CHAR},
      </if>
      <if test="passwordExpireDate != null">
        #{passwordExpireDate,jdbcType=TIMESTAMP},
      </if>
      <if test="lockFlag != null">
        #{lockFlag,jdbcType=INTEGER},
      </if>
      <if test="enableFlag != null">
        #{enableFlag,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null">
        #{updated,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.springbootpractice.demo.spring.security1.dao.example.SecurityLoginEntityExample" resultType="java.lang.Long">
    select count(*) from security_login
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update security_login
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        `password` = #{record.password,jdbcType=CHAR},
      </if>
      <if test="record.passwordExpireDate != null">
        password_expire_date = #{record.passwordExpireDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lockFlag != null">
        lock_flag = #{record.lockFlag,jdbcType=INTEGER},
      </if>
      <if test="record.enableFlag != null">
        enable_flag = #{record.enableFlag,jdbcType=INTEGER},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updated != null">
        updated = #{record.updated,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update security_login
    set id = #{record.id,jdbcType=BIGINT},
      username = #{record.username,jdbcType=VARCHAR},
      `password` = #{record.password,jdbcType=CHAR},
      password_expire_date = #{record.passwordExpireDate,jdbcType=TIMESTAMP},
      lock_flag = #{record.lockFlag,jdbcType=INTEGER},
      enable_flag = #{record.enableFlag,jdbcType=INTEGER},
      created = #{record.created,jdbcType=TIMESTAMP},
      updated = #{record.updated,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.springbootpractice.demo.spring.security1.dao.entity.SecurityLoginEntity">
    update security_login
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=CHAR},
      </if>
      <if test="passwordExpireDate != null">
        password_expire_date = #{passwordExpireDate,jdbcType=TIMESTAMP},
      </if>
      <if test="lockFlag != null">
        lock_flag = #{lockFlag,jdbcType=INTEGER},
      </if>
      <if test="enableFlag != null">
        enable_flag = #{enableFlag,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null">
        updated = #{updated,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.springbootpractice.demo.spring.security1.dao.entity.SecurityLoginEntity">
    update security_login
    set username = #{username,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=CHAR},
      password_expire_date = #{passwordExpireDate,jdbcType=TIMESTAMP},
      lock_flag = #{lockFlag,jdbcType=INTEGER},
      enable_flag = #{enableFlag,jdbcType=INTEGER},
      created = #{created,jdbcType=TIMESTAMP},
      updated = #{updated,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>